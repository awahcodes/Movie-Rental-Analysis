1. The marketing team wants the fist name, last name and email of all customers?
   
SELECT 
first_name,
last_name,
email
FROM customer;

2. Share a list of all customers with their payments. Show as highest payment amount?

SELECT 
customer_id,
amount
FROM payment
ORDER BY customer_id, amount DESC

3. What are the movie rating types?
SELECT 
DISTINCT rating 
FROM film;

4. Provide list of films on rent but not returned

SELECT 
*
FROM rental
WHERE return_date is NULL
ORDER BY rental_date DESC


5. Share a list of the districts where our customers reside

SELECT 
DISTINCT district
FROM address

6. How many movies are there that contain the 'Documentary' in the description.
SELECT 
COUNT(*) as movie_count
FROM film
WHERE description LIKE '%Drama%'

7. How many customers have their firstname that is 3 letters long and either an 'X' or a 
   'Y'as the last letter in the last name.

SELECT 
COUNT(*)
FROM customer
WHERE first_name LIKE '___'
AND (last_name LIKE '%X' OR last_name LIKE '%Y')

8. What is the minimum, maximum, average and total sum of film replacement cost

SELECT
MIN(replacement_cost) as Minimum_Cost,
MAX(replacement_cost) as Maximum_Cost,
ROUND(AVG(replacement_cost),1) as Average_Cost,
SUM(replacement_cost) as Total_Cost
FROM film


9. Which employee had the highest sales amount in a single day

SELECT
staff_id, DATE(payment_date),SUM(amount) as total_amt
FROM 
payment
GROUP BY staff_id, DATE(payment_date)
ORDER BY total_amt DESC

10. In 2020, April 28, 29 and 30 were days with very high revenue. Find the average payment amount grouped by customer and day. Consider days with payments more than 1.

SELECT 
customer_id
, DATE(payment_date)
, ROUND(AVG(amount),1) as Average_amt
, COUNT(amount) as num_of_payment
FROM
payment
WHERE DATE(payment_date) BETWEEN '2020-04-28' AND '2020-04-30'
GROUP BY customer_id, DATE(payment_date)
HAVING COUNT(amount) > 1
ORDER BY AVG(amount) DESC


11. Which customer had the longest average rental duration
SELECT
customer_id, AVG((return_date - rental_date)) as avg_rent_period
FROM 
rental
GROUP BY customer_id
ORDER BY avg_rent_period DESC
LIMIT 1

12. What was the rental durations for customer with id 35

SELECT
EXTRACT( day from (return_date - rental_date)) || ' day(s)' as rent_period
FROM 
rental
WHERE customer_id = 35
ORDER BY rent_period DESC

13. Segment the films into those in:
a. PG,PG-13 or longer than 120mins
b. With 'Drama' and longer than 90mins
c. With 'Drama' and shorter than 90 mins
d. Those with rental_rate below $1


SELECT title,
CASE
WHEN rating IN ('PG', 'PG-13') OR length > 210 THEN 'Great Rating or Long (tier 1)'
WHEN description LIKE '%Drama%' AND length > 90 THEN 'Long Drama (tier 2)'
WHEN description LIKE '%Drama%' AND length <= 90 THEN 'Short Drama (tier 3)'
WHEN rental_rate < 1 THEN 'Very Cheap (tier 4)'
END segment
FROM film
WHERE CASE
WHEN rating IN ('PG', 'PG-13') OR length > 210 THEN 'Great Rating or Long (tier 1)'
WHEN description LIKE '%Drama%' AND length > 90 THEN 'Long Drama (tier 2)'
WHEN description LIKE '%Drama%' AND length <= 90 THEN 'Short Drama (tier 3)'
WHEN rental_rate < 1 THEN 'Very Cheap (tier 4)' 
END IS NOT NULL


14. List all the films with length more than the average length of all the films

SELECT
film_id, title
FROM
film
WHERE length > (SELECT AVG(length) FROM film)

15. List all the films that are available in the inventory in stire 2 more than 3 times

SELECT
*
FROM 
film
WHERE film_id IN (SELECT
film_id
FROM 
inventory
WHERE store_id = 2
GROUP BY film_id
HAVING COUNT(*) > 3)


16. List all the names (first and last) of customers with payments done '2020-01-25'


SELECT 
first_name,
last_name
FROM customer 
WHERE customer_id IN (SELECT
customer_id
FROM payment
WHERE DATE(payment_date) = '2020-01-25')


